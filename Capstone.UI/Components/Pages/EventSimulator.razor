@page "/eventSimulator"
@rendermode InteractiveServer
@inject UserService userService
@inject EventService eventService
@using System.ComponentModel.DataAnnotations

<PageTitle>Event Simulator</PageTitle>

<h3>Event Simulator</h3>

@if (hasLoadError)
{
    <div class="alert alert-danger">❌ Failed to load communications.</div>
}
else
{
    <EditForm Model="@simEvent" OnValidSubmit="PublishEvent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Communication</label>
            <select @onchange="OnCommunicationChanged" class="form-control" required>
                <option value="">-- select communication --</option>
                @foreach (var comm in communications)
                {
                    <option value="@comm.Id">@comm.Title (@comm.TypeCode)</option>
                }
            </select>
        </div>

        <div class="form-group mt-2">
            <label>Event Type</label>
            <InputSelect @bind-Value="simEvent.EventType" class="form-control" disabled="@(!availableEvents.Any())">
                <option value="">-- select event type --</option>
                @foreach (var evt in availableEvents)
                {
                    <option value="@evt">@evt</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary mt-3" disabled="@(!availableEvents.Any())">Publish</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(publishResult))
    {
        <p class="mt-2 text-success">✅ @publishResult</p>
    }
}

@code {
    private List<CommunicationDto> communications = new();
    private List<string> availableEvents = new();
    private SimEvent simEvent = new();
    private string? publishResult;
    private bool hasLoadError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            communications = await userService.GetAllCommunications();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"❌ Error loading communications: {ex.Message}");
            hasLoadError = true;
        }
    }

    private async Task OnCommunicationChanged(ChangeEventArgs e)
    {
        simEvent.CommunicationId = e.Value?.ToString() ?? "";
        simEvent.EventType = string.Empty; // reset selection
        publishResult = null;
        availableEvents.Clear();

        if (Guid.TryParse(simEvent.CommunicationId, out var guid))
        {
            try
            {
                var communication = await userService.GetCommunicationById(guid);
                var communicationTypes = await userService.GetAllCommunicationTypes();
                var communicationType = communicationTypes
                    .FirstOrDefault(t => t.TypeCode == communication?.TypeCode);

                availableEvents = (communicationType?.CommunicationTypeStatuses ?? Enumerable.Empty<CommunicationTypeStatusDto>())
                    .Select(s => s.StatusCode)
                    .ToList();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"❌ Error loading events: {ex.Message}");
            }
        }
    }

    private async Task PublishEvent()
    {
        try
        {
            var evt = new EventPayloadDto
            {
                CommunicationId = simEvent.CommunicationId,
                TimestampUtc = DateTime.UtcNow
            };

            await eventService.PublishAsync(simEvent.EventType, evt);
            publishResult = $"Event '{simEvent.EventType}' published successfully!";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"❌ Failed to publish event: {ex.Message}");
            publishResult = "⚠️ Failed to publish event.";
        }
    }

    private class SimEvent
    {
        [Required]
        public string CommunicationId { get; set; } = string.Empty;

        [Required]
        public string EventType { get; set; } = string.Empty;
    }
}
