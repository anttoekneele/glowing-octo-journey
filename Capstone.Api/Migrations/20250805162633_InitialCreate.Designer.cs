// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250805162633_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeCode");

                    b.ToTable("Communications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CurrentStatus = "DRAFT",
                            LastUpdatedUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Welcome Email",
                            TypeCode = "EMAIL"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CurrentStatus = "PENDING",
                            LastUpdatedUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Verification SMS",
                            TypeCode = "SMS"
                        });
                });

            modelBuilder.Entity("CommunicationStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OccurredUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationId");

                    b.ToTable("CommunicationStatusHistories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CommunicationId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            OccurredUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatusCode = "DRAFT"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CommunicationId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            OccurredUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatusCode = "PENDING"
                        });
                });

            modelBuilder.Entity("CommunicationType", b =>
                {
                    b.Property<string>("TypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeCode");

                    b.ToTable("CommunicationTypes");

                    b.HasData(
                        new
                        {
                            TypeCode = "EMAIL",
                            DisplayName = "Email"
                        },
                        new
                        {
                            TypeCode = "SMS",
                            DisplayName = "SMS"
                        });
                });

            modelBuilder.Entity("CommunicationTypeStatus", b =>
                {
                    b.Property<string>("TypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeCode", "StatusCode");

                    b.ToTable("CommunicationTypeStatuses");

                    b.HasData(
                        new
                        {
                            TypeCode = "EMAIL",
                            StatusCode = "DRAFT",
                            Description = "Draft"
                        },
                        new
                        {
                            TypeCode = "EMAIL",
                            StatusCode = "SENT",
                            Description = "Sent"
                        },
                        new
                        {
                            TypeCode = "SMS",
                            StatusCode = "PENDING",
                            Description = "Pending"
                        },
                        new
                        {
                            TypeCode = "SMS",
                            StatusCode = "DELIVERED",
                            Description = "Delivered"
                        });
                });

            modelBuilder.Entity("Communication", b =>
                {
                    b.HasOne("CommunicationType", "CommunicationType")
                        .WithMany("Communications")
                        .HasForeignKey("TypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationType");
                });

            modelBuilder.Entity("CommunicationStatusHistory", b =>
                {
                    b.HasOne("Communication", "Communication")
                        .WithMany("CommunicationStatusHistories")
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("CommunicationTypeStatus", b =>
                {
                    b.HasOne("CommunicationType", "CommunicationType")
                        .WithMany("CommunicationTypeStatuses")
                        .HasForeignKey("TypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationType");
                });

            modelBuilder.Entity("Communication", b =>
                {
                    b.Navigation("CommunicationStatusHistories");
                });

            modelBuilder.Entity("CommunicationType", b =>
                {
                    b.Navigation("CommunicationTypeStatuses");

                    b.Navigation("Communications");
                });
#pragma warning restore 612, 618
        }
    }
}
